{"version":3,"sources":["component/Header.js","component/Gnb.js","component/Footer.js","component/WebtoonList.js","container/Main.js","component/WebtoonInfo.js","component/EpisodeList.js","container/WebtoonHome.js","container/Viewer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Gnb","props","to","day","Footer","WebtoonList","list","map","webtoon","index","key","id","src","thumbnail","alt","title","artist","Main","URLSearchParams","location","search","get","state","webtoonList","this","_getList","prevProps","prevDay","setState","axios","then","data","console","log","catch","error","length","filter","Component","WebtoonInfo","genre","g","score","EpisodeList","episodes","episode","thumbnailImage","url","dateCreated","substr","WebtoonHome","webtoonId","parseInt","match","params","episodeList","_getWebtoon","_getEpisodeList","webtoons","find","w","webtoonEpisodes","Viewer","episodeId","class","images","img","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93b53559.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        WEBTOON\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Gnb = (props) => (\r\n    <ul className=\"gnb\">\r\n        <li>\r\n            <Link to=\"/?day=mon\" className={ props.day === \"mon\" ? 'tab_day on' : 'tab_day' }>월요일</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/?day=tue\" className={ props.day === \"tue\" ? 'tab_day on' : 'tab_day' }>화요일</Link>\r\n        </li>\r\n        <li>\r\n            <Link to=\"/?day=wed\" className={ props.day === \"wed\" ? 'tab_day on' : 'tab_day' }>수요일</Link>\r\n        </li>\r\n    </ul>\r\n)\r\n\r\nexport default Gnb;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <div className=\"footer\">\r\n        © My Company Name.\r\n    </div>\r\n)\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst WebtoonList = (props) => {\r\n    return(\r\n        <ul className=\"list_webtoon\">\r\n            { props.list.map((webtoon, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/webtoon/${webtoon.id}`} className=\"link_webtoon\">\r\n                        <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title}/>\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {webtoon.title}\r\n                            </strong>\r\n                            {webtoon.artist}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default WebtoonList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Header from \"../component/Header\";\r\nimport Gnb from \"../component/Gnb\";\r\nimport Footer from \"../component/Footer\";\r\nimport WebtoonList from \"../component/WebtoonList\";\r\n\r\nclass Main extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const query = new URLSearchParams(props.location.search);\r\n        const day = query.get('day');\r\n\r\n        this.state = {\r\n            day : day || 'mon', //디폴트로 월요일\r\n            webtoonList : [] //초기 리스트는 비어있습니다.\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getList();\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        // 요일 변경시 setState 처리\r\n        const prevQuery = new URLSearchParams(prevProps.location.search);\r\n        const prevDay = prevQuery.get('day');\r\n        \r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const day = query.get('day');\r\n\r\n        if( prevDay !== day ){\r\n            this.setState({\r\n                day\r\n            });\r\n        }\r\n    }\r\n    \r\n    _getList(){\r\n        const apiUrl = 'dummy/webtoon_list.json';\r\n\r\n        axios.get(apiUrl)\r\n        .then( data => {\r\n\r\n            // apiUrl 리스트를 state에 저장\r\n            this.setState({\r\n                webtoonList : data.data.webtoonList \r\n            })\r\n            console.log(data)\r\n        })\r\n        .catch( error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header/>\r\n                <Gnb day={this.state.day}/>\r\n\r\n                { this.state.webtoonList.length > 0 ? (\r\n                    <WebtoonList list={\r\n                        this.state.webtoonList.filter( webtoon => (\r\n                            webtoon.day === this.state.day // 리스트 중 요일에 해당하는 웹툰만 반환\r\n                        ))\r\n                    } />\r\n                ) : (\r\n                    <span>LOADING...</span>\r\n                )}\r\n\r\n                <Footer/>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst WebtoonInfo = (props) => {\r\n    const webtoon = props.webtoon;\r\n    return (\r\n        <div className=\"wrap_webtoon\">\r\n            <img src={webtoon.thumbnail} className=\"img_webtoon\" alt={webtoon.title} />\r\n            <div className=\"info_webtoon\">\r\n                <strong className=\"tit_webtoon\">{webtoon.title}</strong>\r\n                { webtoon.genre.map((g, index) => (\r\n                    <span key={index} className=\"txt_genre\">{g}</span>\r\n                )) }\r\n                <span className=\"num_score\">평점 : {webtoon.score}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebtoonInfo;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst EpisodeList = (props) => {\r\n    return(\r\n        <ul className=\"list_webtoon list_episode\">\r\n            { props.episodes.map((episode, index) => (\r\n                <li key={index}>\r\n                    <Link to={`/viewer/${episode.id}`} className=\"link_webtoon\">\r\n                        <img src={episode.thumbnailImage.url} className=\"img_webtoon\" alt={episode.title}/>\r\n                        <div className=\"info_webtoon\">\r\n                            <strong className=\"tit_webtoon\">\r\n                                {episode.title}\r\n                            </strong>\r\n                            {`${episode.dateCreated.substr(0,4)}.${episode.dateCreated.substr(4,2)}.${episode.dateCreated.substr(6,2)}`}\r\n                        </div>\r\n                    </Link>\r\n                </li>\r\n            )) }\r\n        </ul>\r\n    )\r\n}\r\nexport default EpisodeList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Header from '../component/Header';\r\nimport Gnb from '../component/Gnb';\r\nimport Footer from '../component/Footer';\r\nimport WebtoonInfo from '../component/WebtoonInfo';\r\nimport EpisodeList from '../component/EpisodeList';\r\n\r\nclass WebtoonHome extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            webtoonId : parseInt(props.match.params.webtoonId, 10),\r\n            webtoon : {},\r\n            episodeList : []\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getWebtoon();\r\n        this._getEpisodeList();\r\n    }\r\n    \r\n    _getWebtoon(){\r\n        const apiUrl = '/dummy/webtoon_detail.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                //웹툰들 중 ID가 일치하는 웹툰을 state.webtoon에 저장\r\n                this.setState({\r\n                    webtoon : data.data.webtoons.find(w => (\r\n                        w.id === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n            .then(data => {\r\n                //웹툰ID가 일치하는 에피소들만 state.episodeList에 저장\r\n                this.setState({\r\n                    episodeList : data.data.webtoonEpisodes.filter(episode => (\r\n                        episode.webtoonId === this.state.webtoonId\r\n                    ))\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header/>\r\n                <Gnb/>\r\n                { this.state.webtoon.id ? (\r\n                    <WebtoonInfo webtoon={this.state.webtoon} />\r\n                ) : (\r\n                    <span>LOADING..</span>\r\n                ) }\r\n\r\n                { this.state.episodeList.length > 0 ? (\r\n                    <EpisodeList episodes={this.state.episodeList} />\r\n                ) : (\r\n                    <span>LOADING..</span>\r\n                ) }\r\n\r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WebtoonHome;","import React, { Component } from 'react';\r\nimport axios from 'axios/index';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Viewer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            episodeId : parseInt(props.match.params.episodeId, 10),\r\n            episode : {}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getEpisodeList();\r\n    }\r\n\r\n    _getEpisodeList(){\r\n        const apiUrl = '/dummy/episode_list.json';\r\n\r\n        axios.get(apiUrl)\r\n        .then( data => {\r\n            this.setState({\r\n                episode : data.data.webtoonEpisodes.find( episode => (\r\n                    episode.id === this.state.episodeId\r\n                ))\r\n            })\r\n        })\r\n        .catch( error => {\r\n            console.log(error);\r\n        });        \r\n    }\r\n\r\n    render(){\r\n        const episode = this.state.episode;\r\n\r\n        return(\r\n            <div class=\"wrap_viewer\">\r\n                { episode.id ? (\r\n                    <div>\r\n                        <div className=\"top_viewer\">\r\n                            {episode.title}\r\n                            <Link to={`/webtoon/${episode.webtoonId}`} className=\"btn_close\">X</Link>\r\n                        </div>\r\n                        <div className=\"wrap_images\">\r\n                            { episode.images.map( (img, index) => (\r\n                                <img key={index} src={img} alt={episode.title} />\r\n                            )) }\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <span>LOADING..</span>\r\n                ) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Viewer;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\n\nimport Main from './container/Main';\nimport WebtoonHome from './container/WebtoonHome';\nimport Viewer from './container/Viewer';\n\nclass App extends Component {\n  render(){\n    return(\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Main}/>\n          <Route path=\"/webtoon/:webtoonId\" component={WebtoonHome}/>\n          <Route path=\"/viewer/:episodeId\" component={Viewer}/>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}